// Code generated by mockery v1.0.0
package mocks

import hybrids "github.com/nebtex/hybrids/golang/hybrids"
import mock "github.com/stretchr/testify/mock"
import oreflection "github.com/nebtex/omniql/commons/golang/oreflection"

// LookupFields is an autogenerated mock type for the LookupFields type
type LookupFields struct {
	mock.Mock
}

// ByCamelCase provides a mock function with given fields: fieldName
func (_m *LookupFields) ByCamelCase(fieldName string) (hybrids.FieldNumber, oreflection.OType, bool) {
	ret := _m.Called(fieldName)

	var r0 hybrids.FieldNumber
	if rf, ok := ret.Get(0).(func(string) hybrids.FieldNumber); ok {
		r0 = rf(fieldName)
	} else {
		r0 = ret.Get(0).(hybrids.FieldNumber)
	}

	var r1 oreflection.OType
	if rf, ok := ret.Get(1).(func(string) oreflection.OType); ok {
		r1 = rf(fieldName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(oreflection.OType)
		}
	}

	var r2 bool
	if rf, ok := ret.Get(2).(func(string) bool); ok {
		r2 = rf(fieldName)
	} else {
		r2 = ret.Get(2).(bool)
	}

	return r0, r1, r2
}

// ByNumber provides a mock function with given fields: fn
func (_m *LookupFields) ByNumber(fn hybrids.FieldNumber) (string, oreflection.OType, bool) {
	ret := _m.Called(fn)

	var r0 string
	if rf, ok := ret.Get(0).(func(hybrids.FieldNumber) string); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 oreflection.OType
	if rf, ok := ret.Get(1).(func(hybrids.FieldNumber) oreflection.OType); ok {
		r1 = rf(fn)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(oreflection.OType)
		}
	}

	var r2 bool
	if rf, ok := ret.Get(2).(func(hybrids.FieldNumber) bool); ok {
		r2 = rf(fn)
	} else {
		r2 = ret.Get(2).(bool)
	}

	return r0, r1, r2
}

// BySnakeCase provides a mock function with given fields: fieldName
func (_m *LookupFields) BySnakeCase(fieldName string) (hybrids.FieldNumber, oreflection.OType, bool) {
	ret := _m.Called(fieldName)

	var r0 hybrids.FieldNumber
	if rf, ok := ret.Get(0).(func(string) hybrids.FieldNumber); ok {
		r0 = rf(fieldName)
	} else {
		r0 = ret.Get(0).(hybrids.FieldNumber)
	}

	var r1 oreflection.OType
	if rf, ok := ret.Get(1).(func(string) oreflection.OType); ok {
		r1 = rf(fieldName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(oreflection.OType)
		}
	}

	var r2 bool
	if rf, ok := ret.Get(2).(func(string) bool); ok {
		r2 = rf(fieldName)
	} else {
		r2 = ret.Get(2).(bool)
	}

	return r0, r1, r2
}
