// Code generated by mockery v1.0.0
package mocks

import corev1 "github.com/nebtex/omniql/pkg/next/corev1"
import hybrids "github.com/nebtex/hybrids/golang/hybrids"
import mock "github.com/stretchr/testify/mock"
import oreflection "github.com/nebtex/omniql/commons/golang/oreflection"

// Field is an autogenerated mock type for the Field type
type Field struct {
	mock.Mock
}

// FieldPosition provides a mock function with given fields:
func (_m *Field) FieldPosition() hybrids.FieldNumber {
	ret := _m.Called()

	var r0 hybrids.FieldNumber
	if rf, ok := ret.Get(0).(func() hybrids.FieldNumber); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(hybrids.FieldNumber)
	}

	return r0
}

// HybridType provides a mock function with given fields:
func (_m *Field) HybridType() hybrids.Types {
	ret := _m.Called()

	var r0 hybrids.Types
	if rf, ok := ret.Get(0).(func() hybrids.Types); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(hybrids.Types)
	}

	return r0
}

// Items provides a mock function with given fields:
func (_m *Field) Items() oreflection.Items {
	ret := _m.Called()

	var r0 oreflection.Items
	if rf, ok := ret.Get(0).(func() oreflection.Items); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(oreflection.Items)
		}
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *Field) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ParentType provides a mock function with given fields:
func (_m *Field) ParentType() oreflection.OType {
	ret := _m.Called()

	var r0 oreflection.OType
	if rf, ok := ret.Get(0).(func() oreflection.OType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(oreflection.OType)
		}
	}

	return r0
}

// Schema provides a mock function with given fields:
func (_m *Field) Schema() corev1.FieldReader {
	ret := _m.Called()

	var r0 corev1.FieldReader
	if rf, ok := ret.Get(0).(func() corev1.FieldReader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(corev1.FieldReader)
		}
	}

	return r0
}

// Type provides a mock function with given fields:
func (_m *Field) Type() oreflection.OType {
	ret := _m.Called()

	var r0 oreflection.OType
	if rf, ok := ret.Get(0).(func() oreflection.OType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(oreflection.OType)
		}
	}

	return r0
}
