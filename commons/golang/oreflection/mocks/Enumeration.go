// Code generated by mockery v1.0.0
package mocks

import corev1 "github.com/nebtex/omniql/pkg/next/corev1"
import hybrids "github.com/nebtex/hybrids/golang/hybrids"
import mock "github.com/stretchr/testify/mock"
import oreflection "github.com/nebtex/omniql/commons/golang/oreflection"

// Enumeration is an autogenerated mock type for the Enumeration type
type Enumeration struct {
	mock.Mock
}

// HybridType provides a mock function with given fields:
func (_m *Enumeration) HybridType() hybrids.Types {
	ret := _m.Called()

	var r0 hybrids.Types
	if rf, ok := ret.Get(0).(func() hybrids.Types); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(hybrids.Types)
	}

	return r0
}

// Lookup provides a mock function with given fields:
func (_m *Enumeration) Lookup() oreflection.LookupEnumeration {
	ret := _m.Called()

	var r0 oreflection.LookupEnumeration
	if rf, ok := ret.Get(0).(func() oreflection.LookupEnumeration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(oreflection.LookupEnumeration)
		}
	}

	return r0
}

// Schema provides a mock function with given fields:
func (_m *Enumeration) Schema() corev1.EnumerationReader {
	ret := _m.Called()

	var r0 corev1.EnumerationReader
	if rf, ok := ret.Get(0).(func() corev1.EnumerationReader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(corev1.EnumerationReader)
		}
	}

	return r0
}
