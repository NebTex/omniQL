// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import oreflection "github.com/nebtex/omniql/commons/golang/oreflection"

// ReflectStore is an autogenerated mock type for the ReflectStore type
type ReflectStore struct {
	mock.Mock
}

// LookupResourceByID provides a mock function with given fields: application, rid
func (_m *ReflectStore) LookupResourceByID(application string, rid []byte) (oreflection.OType, bool) {
	ret := _m.Called(application, rid)

	var r0 oreflection.OType
	if rf, ok := ret.Get(0).(func(string, []byte) oreflection.OType); ok {
		r0 = rf(application, rid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(oreflection.OType)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string, []byte) bool); ok {
		r1 = rf(application, rid)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// OReflect provides a mock function with given fields: magicType
func (_m *ReflectStore) OReflect(magicType string) (oreflection.OType, error) {
	ret := _m.Called(magicType)

	var r0 oreflection.OType
	if rf, ok := ret.Get(0).(func(string) oreflection.OType); ok {
		r0 = rf(magicType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(oreflection.OType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(magicType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: magicType, table
func (_m *ReflectStore) Upsert(magicType string, table interface{}) oreflection.OType {
	ret := _m.Called(magicType, table)

	var r0 oreflection.OType
	if rf, ok := ret.Get(0).(func(string, interface{}) oreflection.OType); ok {
		r0 = rf(magicType, table)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(oreflection.OType)
		}
	}

	return r0
}
