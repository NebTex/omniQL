// Code generated by mockery v1.0.0
package mocks

import corev1 "github.com/nebtex/omniql/pkg/next/corev1"
import hybrids "github.com/nebtex/hybrids/golang/hybrids"
import mock "github.com/stretchr/testify/mock"
import oreflection "github.com/nebtex/omniql/commons/golang/oreflection"

// Table is an autogenerated mock type for the Table type
type Table struct {
	mock.Mock
}

// FieldCount provides a mock function with given fields:
func (_m *Table) FieldCount() hybrids.FieldNumber {
	ret := _m.Called()

	var r0 hybrids.FieldNumber
	if rf, ok := ret.Get(0).(func() hybrids.FieldNumber); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(hybrids.FieldNumber)
	}

	return r0
}

// LookupFields provides a mock function with given fields:
func (_m *Table) LookupFields() oreflection.LookupFields {
	ret := _m.Called()

	var r0 oreflection.LookupFields
	if rf, ok := ret.Get(0).(func() oreflection.LookupFields); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(oreflection.LookupFields)
		}
	}

	return r0
}

// Schema provides a mock function with given fields:
func (_m *Table) Schema() corev1.TableReader {
	ret := _m.Called()

	var r0 corev1.TableReader
	if rf, ok := ret.Get(0).(func() corev1.TableReader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(corev1.TableReader)
		}
	}

	return r0
}
