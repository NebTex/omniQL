// Code generated by mockery v1.0.0
package mocks

import hybrids "github.com/nebtex/hybrids/golang/hybrids"
import mock "github.com/stretchr/testify/mock"
import oreflection "github.com/nebtex/omniql/commons/golang/oreflection"

// FieldGenerator is an autogenerated mock type for the FieldGenerator type
type FieldGenerator struct {
	mock.Mock
}

// Boolean provides a mock function with given fields: path, table, fn
func (_m *FieldGenerator) Boolean(path string, table oreflection.OType, fn hybrids.FieldNumber) (bool, error) {
	ret := _m.Called(path, table, fn)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, oreflection.OType, hybrids.FieldNumber) bool); ok {
		r0 = rf(path, table, fn)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, oreflection.OType, hybrids.FieldNumber) error); ok {
		r1 = rf(path, table, fn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Byte provides a mock function with given fields: path, table, fn
func (_m *FieldGenerator) Byte(path string, table oreflection.OType, fn hybrids.FieldNumber) ([]byte, error) {
	ret := _m.Called(path, table, fn)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, oreflection.OType, hybrids.FieldNumber) []byte); ok {
		r0 = rf(path, table, fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, oreflection.OType, hybrids.FieldNumber) error); ok {
		r1 = rf(path, table, fn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Float32 provides a mock function with given fields: path, table, fn
func (_m *FieldGenerator) Float32(path string, table oreflection.OType, fn hybrids.FieldNumber) (float32, error) {
	ret := _m.Called(path, table, fn)

	var r0 float32
	if rf, ok := ret.Get(0).(func(string, oreflection.OType, hybrids.FieldNumber) float32); ok {
		r0 = rf(path, table, fn)
	} else {
		r0 = ret.Get(0).(float32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, oreflection.OType, hybrids.FieldNumber) error); ok {
		r1 = rf(path, table, fn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Float64 provides a mock function with given fields: path, table, fn
func (_m *FieldGenerator) Float64(path string, table oreflection.OType, fn hybrids.FieldNumber) (float64, error) {
	ret := _m.Called(path, table, fn)

	var r0 float64
	if rf, ok := ret.Get(0).(func(string, oreflection.OType, hybrids.FieldNumber) float64); ok {
		r0 = rf(path, table, fn)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, oreflection.OType, hybrids.FieldNumber) error); ok {
		r1 = rf(path, table, fn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Int16 provides a mock function with given fields: path, table, fn
func (_m *FieldGenerator) Int16(path string, table oreflection.OType, fn hybrids.FieldNumber) (int16, error) {
	ret := _m.Called(path, table, fn)

	var r0 int16
	if rf, ok := ret.Get(0).(func(string, oreflection.OType, hybrids.FieldNumber) int16); ok {
		r0 = rf(path, table, fn)
	} else {
		r0 = ret.Get(0).(int16)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, oreflection.OType, hybrids.FieldNumber) error); ok {
		r1 = rf(path, table, fn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Int32 provides a mock function with given fields: path, table, fn
func (_m *FieldGenerator) Int32(path string, table oreflection.OType, fn hybrids.FieldNumber) (int32, error) {
	ret := _m.Called(path, table, fn)

	var r0 int32
	if rf, ok := ret.Get(0).(func(string, oreflection.OType, hybrids.FieldNumber) int32); ok {
		r0 = rf(path, table, fn)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, oreflection.OType, hybrids.FieldNumber) error); ok {
		r1 = rf(path, table, fn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Int64 provides a mock function with given fields: path, table, fn
func (_m *FieldGenerator) Int64(path string, table oreflection.OType, fn hybrids.FieldNumber) (int64, error) {
	ret := _m.Called(path, table, fn)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, oreflection.OType, hybrids.FieldNumber) int64); ok {
		r0 = rf(path, table, fn)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, oreflection.OType, hybrids.FieldNumber) error); ok {
		r1 = rf(path, table, fn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Int8 provides a mock function with given fields: path, table, fn
func (_m *FieldGenerator) Int8(path string, table oreflection.OType, fn hybrids.FieldNumber) (int8, error) {
	ret := _m.Called(path, table, fn)

	var r0 int8
	if rf, ok := ret.Get(0).(func(string, oreflection.OType, hybrids.FieldNumber) int8); ok {
		r0 = rf(path, table, fn)
	} else {
		r0 = ret.Get(0).(int8)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, oreflection.OType, hybrids.FieldNumber) error); ok {
		r1 = rf(path, table, fn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceID provides a mock function with given fields: path, table, resourceIdType, fn
func (_m *FieldGenerator) ResourceID(path string, table oreflection.OType, resourceIdType hybrids.ResourceIDType, fn hybrids.FieldNumber) ([]byte, error) {
	ret := _m.Called(path, table, resourceIdType, fn)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, oreflection.OType, hybrids.ResourceIDType, hybrids.FieldNumber) []byte); ok {
		r0 = rf(path, table, resourceIdType, fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, oreflection.OType, hybrids.ResourceIDType, hybrids.FieldNumber) error); ok {
		r1 = rf(path, table, resourceIdType, fn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShouldBeNil provides a mock function with given fields: path, ot, fn
func (_m *FieldGenerator) ShouldBeNil(path string, ot oreflection.OType, fn hybrids.FieldNumber) (bool, error) {
	ret := _m.Called(path, ot, fn)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, oreflection.OType, hybrids.FieldNumber) bool); ok {
		r0 = rf(path, ot, fn)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, oreflection.OType, hybrids.FieldNumber) error); ok {
		r1 = rf(path, ot, fn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// String provides a mock function with given fields: path, table, fn
func (_m *FieldGenerator) String(path string, table oreflection.OType, fn hybrids.FieldNumber) (string, error) {
	ret := _m.Called(path, table, fn)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, oreflection.OType, hybrids.FieldNumber) string); ok {
		r0 = rf(path, table, fn)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, oreflection.OType, hybrids.FieldNumber) error); ok {
		r1 = rf(path, table, fn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Uint16 provides a mock function with given fields: path, table, fn
func (_m *FieldGenerator) Uint16(path string, table oreflection.OType, fn hybrids.FieldNumber) (uint16, error) {
	ret := _m.Called(path, table, fn)

	var r0 uint16
	if rf, ok := ret.Get(0).(func(string, oreflection.OType, hybrids.FieldNumber) uint16); ok {
		r0 = rf(path, table, fn)
	} else {
		r0 = ret.Get(0).(uint16)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, oreflection.OType, hybrids.FieldNumber) error); ok {
		r1 = rf(path, table, fn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Uint32 provides a mock function with given fields: path, table, fn
func (_m *FieldGenerator) Uint32(path string, table oreflection.OType, fn hybrids.FieldNumber) (uint32, error) {
	ret := _m.Called(path, table, fn)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(string, oreflection.OType, hybrids.FieldNumber) uint32); ok {
		r0 = rf(path, table, fn)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, oreflection.OType, hybrids.FieldNumber) error); ok {
		r1 = rf(path, table, fn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Uint64 provides a mock function with given fields: path, table, fn
func (_m *FieldGenerator) Uint64(path string, table oreflection.OType, fn hybrids.FieldNumber) (uint64, error) {
	ret := _m.Called(path, table, fn)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(string, oreflection.OType, hybrids.FieldNumber) uint64); ok {
		r0 = rf(path, table, fn)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, oreflection.OType, hybrids.FieldNumber) error); ok {
		r1 = rf(path, table, fn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Uint8 provides a mock function with given fields: path, table, fn
func (_m *FieldGenerator) Uint8(path string, table oreflection.OType, fn hybrids.FieldNumber) (uint8, error) {
	ret := _m.Called(path, table, fn)

	var r0 uint8
	if rf, ok := ret.Get(0).(func(string, oreflection.OType, hybrids.FieldNumber) uint8); ok {
		r0 = rf(path, table, fn)
	} else {
		r0 = ret.Get(0).(uint8)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, oreflection.OType, hybrids.FieldNumber) error); ok {
		r1 = rf(path, table, fn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VectorLen provides a mock function with given fields: path, ot, fn
func (_m *FieldGenerator) VectorLen(path string, ot oreflection.OType, fn hybrids.FieldNumber) (int, error) {
	ret := _m.Called(path, ot, fn)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, oreflection.OType, hybrids.FieldNumber) int); ok {
		r0 = rf(path, ot, fn)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, oreflection.OType, hybrids.FieldNumber) error); ok {
		r1 = rf(path, ot, fn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
